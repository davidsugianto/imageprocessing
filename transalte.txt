1. introduction

2. Loading Video Source OpenCV Python Tutorial
Dalam tutorial OpenCV dengan Python ini, kita akan membahas beberapa operasi dasar dengan video dan Webcam. Selain garis awal, penanganan frame dari video identik dengan penanganan gambar. Mari kita tunjukkan beberapa contohnya:

				import numpy as np
				import cv2

				cap = cv2.VideoCapture(0)
				 
				while(True):
				    ret, frame = cap.read()
				    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
				 
				    cv2.imshow('frame',gray)
				    if cv2.waitKey(1) & 0xFF == ord('q'):
					break

				cap.release()
				cv2.destroyAllWindows()

Pertama, kita mengimpor numpy dan cv2, tidak ada yang mewah di sana. Selanjutnya, kita cay cap = cv2.VideoCapture (0). Ini akan mengembalikan video dari webcam pertama di komputer Anda. Jika Anda menonton video tutorial, Anda akan melihat bahwa saya menggunakan 1, karena webcam pertama saya merekam saya, dan webcam kedua digunakan untuk umpan tutorial sebenarnya.

				while(True):
    				ret, frame = cap.read()

Kode ini memulai sebuah loop tak terbatas (untuk dipecahkan kemudian oleh sebuah pernyataan break), di mana kita memiliki ret dan frame yang didefinisikan sebagai cap.read (). Pada dasarnya, ret adalah boolean mengenai apakah ada kembali sama sekali atau tidak, pada frame adalah setiap frame yang dikembalikan. Jika tidak ada frame, Anda tidak akan mendapatkan error, Anda akan mendapatkan None.

				gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

Di sini, kita mendefinisikan variabel baru, abu-abu, sebagai bingkai, diubah menjadi abu-abu. Perhatikan ini mengatakan BGR2GRAY. Penting untuk dicatat bahwa OpenCV membaca warna sebagai BGR (Blue Green Red), di mana sebagian besar aplikasi komputer dibaca sebagai RGB (Red Green Blue). Ingat ini.

				cv2.imshow('frame',gray)

Perhatikan bahwa, meski sedang streaming video, kita tetap menggunakan imshow. Di sini, kami menampilkan umpan yang dikonversi ke abu-abu. Jika Anda ingin menunjukkan keduanya pada saat bersamaan, Anda bisa melakukan imshow untuk bingkai aslinya, dan imshow untuk jendela abu-abu dan dua akan muncul.

   				if cv2.waitKey(1) & 0xFF == ord('q'):
       				    break

Pernyataan ini hanya berjalan sekali per frame. Pada dasarnya, jika kita mendapatkan kunci, dan kunci itu adalah q, kita akan keluar dari loop sementara dengan jeda, yang kemudian berjalan:

				cap.release()
				cv2.destroyAllWindows()

Ini melepaskan webcam, lalu menutup semua jendela imshow ().
Dalam beberapa kasus, Anda mungkin benar-benar ingin merekam, dan menyimpan rekaman ke file baru. Berikut adalah contoh melakukan hal ini di Windows:

				import numpy as np
				import cv2

				cap = cv2.VideoCapture(1)
				fourcc = cv2.VideoWriter_fourcc(*'XVID')
				out = cv2.VideoWriter('output.avi',fourcc, 20.0, (640,480))

				while(True):
				    ret, frame = cap.read()
				    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
				    out.write(frame)
				    cv2.imshow('frame',gray)
				    if cv2.waitKey(1) & 0xFF == ord('q'):
					break

				cap.release()
				out.release()
				cv2.destroyAllWindows()

Terutama untuk dicatat di sini adalah codec yang digunakan, dan informasi output didefinisikan sebelum while loop. Kemudian, dalam loop sementara, kita menggunakan out.write () untuk mengeluarkan frame. Akhirnya, di luar loop sementara, setelah kami melepaskan webcam kami, kami juga melepaskannya.

Hebat, jadi sekarang kita tahu bagaimana cara mengoperasikannya dengan baik gambar maupun video. Jika Anda tidak memiliki webcam, Anda dapat mengikuti sepanjang sisa tutorial dengan gambar, atau bahkan video. Jika Anda ingin menggunakan video, bukan webcam, dalam umpan, Anda menentukan jalur file untuk video dan bukan nomor kamera.

Sekarang kita bisa bekerja dengan sumber, mari kita tunjukkan bagaimana kita bisa menggambar sesuatu. Sebelumnya, Anda ditunjukkan bahwa Anda dapat menggunakan Matplotlib untuk membuat grafik di atas gambar Anda, namun Matplotlib tidak benar-benar dimaksudkan untuk tujuan ini, terutama tidak dengan umpan video. Untungnya, OpenCV hadir dengan beberapa alat hebat untuk membantu kita menggambar dan menandai umpan kita secara real time, itulah yang akan kita bahas di tutorial berikutnya.


3. Drawing and Writing on Image OpenCV Python Tutorial
Dalam tutorial OpenCV dengan Python ini, kita akan membahas bagaimana menggambar berbagai bentuk pada gambar dan video Anda. Sudah cukup umum untuk ingin menandai objek yang terdeteksi dengan cara tertentu, jadi kita manusia dapat dengan mudah melihat apakah program kita berjalan seperti yang kita harapkan. Contoh dari ini akan menjadi salah satu gambar yang ditunjukkan sebelumnya:
Untuk contoh sementara ini, saya akan menggunakan gambar berikut ini:

#gambar

Anda dianjurkan untuk menggunakan citra Anda sendiri. Seperti biasa, kode awal kita bisa seperti:

				import numpy as np
				import cv2

				img = cv2.imread('watch.jpg',cv2.IMREAD_COLOR)

				Next, we can start drawing, like:

				cv2.line(img,(0,0),(150,150),(255,255,255),15)

				cv2.imshow('image',img)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Cv2.line () mengambil parameter berikut: di mana, mulai koordinat, koordinat akhir, warna (bgr), ketebalan garis.

Hasilnya disini:
#output gambar

Baiklah, keren, mari kita masuk akal dengan beberapa bentuk lagi. Selanjutnya, sebuah persegi panjang:

				cv2.rectangle(img,(15,25),(200,150),(0,0,255),15)

Parameter di sini adalah gambar, koordinat kiri atas, koordinat kanan bawah, warna, dan ketebalan garis. 
Bagaimana dengan lingkaran?

				cv2.circle(img,(100,63), 55, (0,255,0), -1)

Parameter di sini adalah gambar / bingkai, bagian tengah lingkaran, jari-jari, warna, dan ketebalannya. Perhatikan kita memiliki -1 untuk ketebalan. Ini berarti objek benar-benar akan terisi, jadi kita akan mendapatkan sebuah lingkaran yang penuh.

Garis, persegi panjang, dan lingkarannya keren dan semua, tapi bagaimana kalau kita menginginkan pentagon, atau oktagon, atau octdecagon ?! Tidak masalah!

				pts = np.array([[10,5],[20,30],[70,20],[50,10]], np.int32)
				# OpenCV documentation had this code, which reshapes the array to a 1 x 2. I did not 
				# find this necessary, but you may:
				#pts = pts.reshape((-1,1,2))
				cv2.polylines(img, [pts], True, (0,255,255), 3)

Pertama, kami memberi nama poin, kekurangan poin, sebagai koordinat numpi koordinat. Kemudian, kita menggunakan cv2.polylines untuk menggambar garis. Parameternya adalah sebagai berikut: di mana objek ditarik, koordinatnya, sebaiknya kita "menghubungkan" titik akhir dan titik awal, warna, dan lagi ketebalannya.

Hal terakhir yang mungkin ingin Anda lakukan adalah menulis pada gambar. Ini bisa dilakukan seperti ini:

				font = cv2.FONT_HERSHEY_SIMPLEX
				cv2.putText(img,'OpenCV Tuts!',(0,130), font, 1, (200,255,155), 2, cv2.LINE_AA)

Kode penuh sampai saat ini akan menjadi seperti:

				import numpy as np
				import cv2

				img = cv2.imread('watch.jpg',cv2.IMREAD_COLOR)
				cv2.line(img,(0,0),(200,300),(255,255,255),50)
				cv2.rectangle(img,(500,250),(1000,500),(0,0,255),15)
				cv2.circle(img,(447,63), 63, (0,255,0), -1)
				pts = np.array([[100,50],[200,300],[700,200],[500,100]], np.int32)
				pts = pts.reshape((-1,1,2))
				cv2.polylines(img, [pts], True, (0,255,255), 3)
				font = cv2.FONT_HERSHEY_SIMPLEX
				cv2.putText(img,'OpenCV Tuts!',(10,500), font, 6, (200,255,155), 13, cv2.LINE_AA)
				cv2.imshow('image',img)
				cv2.waitKey(0)
				cv2.destroyAllWindows()
Hasil:

#output image

Pada tutorial selanjutnya, kita akan membahas operasi gambar dasar yang bisa kita lakukan.


4. Image Operations OpenCV Python Tutorial
Dalam Python ini dengan tutorial OpenCV, kita akan membahas beberapa dasar-dasar operasi gambar sederhana yang bisa kita lakukan. Setiap video dipecah menjadi bingkai. Setiap bingkai, seperti gambar, lalu dipecah menjadi piksel yang tersimpan dalam baris dan kolom di dalam bingkai / gambar. Setiap piksel memiliki lokasi koordinat, dan setiap piksel terdiri dari nilai warna. Mari temukan beberapa contoh untuk mengakses berbagai bit dari prinsip-prinsip ini.

Kita akan mulai dengan membaca dalam gambar seperti biasa (gunakan sendiri jika bisa, tapi inilah yang saya gunakan disini):

#image

				import cv2
				import numpy as np

				img = cv2.imread('watch.jpg',cv2.IMREAD_COLOR)

Sekarang, kita bisa mereferensi piksel tertentu, seperti:

				px = img[55,55]

Selanjutnya, sebenarnya kita bisa mengubah sebuah pixel:

				img[55,55] = [255,255,255]

Kemudian re-reference:

				px = img[55,55]
				print(px)

Seharusnya berbeda sekarang. Selanjutnya, kita bisa mereferensikan ROI, atau Region of Image, seperti:

				px = img[100:150,100:150]
				print(px)

Kita juga bisa memodifikasi ROI, seperti ini:
				img[100:150,100:150] = [255,255,255]

Kita bisa mereferensi karakteristik tertentu dari citra kita:

				print(img.shape)
				print(img.size)
				print(img.dtype)

Dan kita bisa melakukan operasi, seperti:

				watch_face = img[37:111,107:194]
				img[0:74,0:87] = watch_face

				cv2.imshow('image',img)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Ini akan bekerja dengan gambar saya, tapi mungkin bukan untuk gambar Anda, tergantung ukurannya. Keluaran dalam kasus saya:

#putput image

Ini adalah beberapa operasi sederhana. Pada tutorial berikutnya, kita akan membahas beberapa operasi gambar lanjutan yang bisa kita lakukan


5. Image arithmetics and Logic OpenCV Python Tutorial
Selamat datang di tutorial OpenCV dengan Python yang lain, dalam tutorial ini kita akan membahas beberapa operasi aritmatika sederhana yang dapat kita lakukan pada gambar, dan juga menjelaskan apa yang mereka lakukan. Untuk melakukan ini, kita akan membutuhkan dua gambar dengan ukuran yang sama untuk memulai, kemudian pada gambar yang lebih kecil dan yang lebih besar. Untuk memulai, saya akan menggunakan:

#gambar

dan

#gambar

Pertama, mari kita lihat apa tambahan sederhana yang akan dilakukan:

				import cv2
				import numpy as np

				# 500 x 250
				img1 = cv2.imread('3D-Matplotlib.png')
				img2 = cv2.imread('mainsvmimage.png')

				add = img1+img2

				cv2.imshow('add',add)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Hasil:
#gambar

Tidak mungkin Anda menginginkan penambahan berantakan semacam ini. OpenCV memiliki metode "add", mari kita lihat apa yang terjadi, mengganti "add" sebelumnya dengan:

				add = cv2.add(img1,img2)

Hasil:
#gambar

Mungkin juga bukan yang ideal disini. Kita bisa melihat bahwa sebagian besar gambar itu sangat "putih". Ini karena warna 0-255, di mana 255 adalah "cahaya penuh." Jadi, misalnya: (155,211,79) + (50, 170, 200) = 205, 381, 279 ... diterjemahkan ke (205, 255, 257).

Selanjutnya, kita bisa menambahkan gambar, dan masing-masing membawa "bobot" yang berbeda sehingga bisa berbicara. Begini cara kerjanya:

				import cv2
				import numpy as np

				img1 = cv2.imread('3D-Matplotlib.png')
				img2 = cv2.imread('mainsvmimage.png')

				weighted = cv2.addWeighted(img1, 0.6, img2, 0.4, 0)
				cv2.imshow('weighted',weighted)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Untuk metode addWeighted, parameternya adalah gambar pertama, bobot, gambar kedua, bobot itu, dan akhirnya gamma, yang merupakan pengukuran cahaya. Kita akan meninggalkannya pada nol untuk saat ini.

Hasil:
#gambar

Itu adalah beberapa pilihan tambahan, tapi bagaimana jika Anda benar-benar ingin menambahkan satu gambar ke gambar yang lain, di mana tumpang tindih terbaru yang pertama? Dalam hal ini, Anda akan memulai dengan yang terbesar, lalu tambahkan gambar yang lebih kecil. Untuk ini, kita akan menggunakan gambar 3D-Matplotlib.png yang sama, namun gunakan yang baru, logo Python:

Sekarang, kita bisa mengambil logo ini, dan letakkan di gambar asli. Itu akan sangat mudah (pada dasarnya menggunakan kode ish sama yang kita gunakan di tutorial sebelumnya dimana kita mengganti Region of Image (ROI) dengan yang baru), tapi bagaimana jika kita hanya menginginkan bagian logo, dan bukan latar belakang putih. ? Kita bisa menggunakan prinsip yang sama seperti yang telah kita gunakan sebelumnya untuk penggantian ROI, namun kita memerlukan cara untuk "menghapus" latar belakang logo, sehingga warna putih tidak perlu lagi menghalangi lebih banyak gambar latar belakang. Pertama saya akan menunjukkan kode penuh, dan kemudian jelaskan:

				import cv2
				import numpy as np

				# Load two images
				img1 = cv2.imread('3D-Matplotlib.png')
				img2 = cv2.imread('mainlogo.png')

				# I want to put logo on top-left corner, So I create a ROI
				rows,cols,channels = img2.shape
				roi = img1[0:rows, 0:cols ]

				# Now create a mask of logo and create its inverse mask
				img2gray = cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)

				# add a threshold
				ret, mask = cv2.threshold(img2gray, 220, 255, cv2.THRESH_BINARY_INV)

				mask_inv = cv2.bitwise_not(mask)

				# Now black-out the area of logo in ROI
				img1_bg = cv2.bitwise_and(roi,roi,mask = mask_inv)

				# Take only region of logo from logo image.
				img2_fg = cv2.bitwise_and(img2,img2,mask = mask)

				dst = cv2.add(img1_bg,img2_fg)
				img1[0:rows, 0:cols ] = dst

				cv2.imshow('res',img1)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Jumlah yang layak terjadi di sini, dan beberapa hal baru muncul. Hal pertama yang kita lihat itu baru, adalah penerapan ambang batas: ret, mask = cv2.threshold (img2gray, 220, 255, cv2.THRESH_BINARY_INV).

Kami akan membahas thresholding lebih banyak pada tutorial berikutnya, jadi teruskan untuk mengetahui secara spesifik, namun pada dasarnya cara kerjanya adalah akan mengubah semua piksel menjadi hitam atau putih, berdasarkan nilai ambang batas. Dalam kasus kami, ambang batas adalah 220, tapi kami dapat menggunakan nilai lain, atau bahkan memilihnya secara dinamis, yang merupakan variabel retik yang dapat digunakan. Selanjutnya, kita melihat: mask_inv = cv2.bitwise_not (mask). Ini adalah operasi bitwise. Pada dasarnya, operator ini sangat mirip dengan yang biasa dari python, kecuali satu, tapi kita tidak akan menyentuhnya di sini. Dalam kasus ini, bagian tak kasat mata adalah tempat warna hitam. Kemudian, kita dapat mengatakan bahwa kita ingin menghilangkan area ini pada gambar pertama, lalu mengambil gambar 2 dan mengganti isinya di tempat kosong itu.

Hasil:
#gambar

Pada tutorial selanjutnya, kita membahas thresholding lebih mendalam.


6. Thresholding OpenCV Python Tutorial
Selamat datang di tutorial OpenCV yang lain. Dalam tutorial ini, kami akan membahas thresholding untuk analisis gambar dan video. Gagasan tentang thresholding adalah untuk lebih menyederhanakan data visual untuk analisis. Pertama, Anda bisa masuk ke skala abu-abu, namun Anda harus mempertimbangkan bahwa grayscale masih memiliki setidaknya 255 nilai. Apa thresholding yang bisa dilakukan, pada tingkat yang paling dasar, mengubah segalanya menjadi putih atau hitam, berdasarkan nilai ambang batas. Misalkan kita menginginkan ambang batas menjadi 125 (dari 255), maka semua yang ada di bawah dan di bawah akan dikonversi menjadi 0, atau hitam, dan semua yang di atas 125 akan dikonversi menjadi 255, atau putih. Jika Anda mengkonversi ke grayscale seperti biasa, Anda akan menjadi putih dan hitam. Jika Anda tidak beralih ke grayscale, Anda akan mendapatkan gambar yang terisi, namun akan ada warna.

Meski kedengarannya cukup bagus, seringkali tidak. Kami akan mencakup beberapa contoh dan berbagai jenis thresholding di sini untuk menggambarkan hal ini. Kami akan menggunakan gambar berikut sebagai contoh gambar kami, tapi jangan ragu untuk menggunakan salah satu dari Anda sendiri:
#gambar

Uraian singkat dari sebuah buku ini membuat contoh bagus mengapa seseorang bisa mengukurnya. Pertama, latar belakangnya sama sekali tidak putih sama sekali, semuanya redup, tapi juga semuanya bermacam-macam. Beberapa bagian cukup ringan agar mudah dibaca, sementara yang lain cukup gelap dan memerlukan sedikit fokus untuk dipastikan. Pertama, mari kita coba hanya ambang sederhana:

				retval, threshold = cv2.threshold(img, 10, 255, cv2.THRESH_BINARY)

Ambang biner adalah ambang "baik atau" sederhana, di mana pikselnya adalah 255 atau 0. Dalam banyak kasus, ini akan berwarna putih atau hitam, namun kita telah membiarkan gambar kita diwarnai untuk saat ini, jadi warnanya tetap berwarna. Parameter pertama di sini adalah gambarnya. Parameter berikutnya adalah ambang batas, kita memilih 10. Berikutnya adalah nilai maksimum, yang kita pilih sebagai 255. Selanjutnya dan akhirnya kita memiliki tipe ambang batas, yang telah kita pilih sebagai THRESH_BINARY. Biasanya, ambang batas 10 akan agak buruk pilihannya. Kami memilih 10, karena ini adalah gambar dengan cahaya rendah, jadi kami memilih jumlah yang rendah. Biasanya sesuatu tentang 125-150 mungkin akan berhasil.

				import cv2
				import numpy as np

				img = cv2.imread('bookpage.jpg')
				retval, threshold = cv2.threshold(img, 12, 255, cv2.THRESH_BINARY)
				cv2.imshow('original',img)
				cv2.imshow('threshold',threshold)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Hasil:
#gambar

Citra sekarang sedikit lebih baik untuk membaca, tapi masih sedikit berantakan. Secara visual, lebih baik, tapi menggunakan program untuk menganalisa ini masih akan cukup sulit. Mari kita lihat apakah kita bisa menyederhanakannya lebih jauh.

Pertama, mari kita grayscale gambar, dan kemudian melakukan ambang batas:

				import cv2
				import numpy as np

				grayscaled = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
				retval, threshold = cv2.threshold(grayscaled, 10, 255, cv2.THRESH_BINARY)
				cv2.imshow('original',img)
				cv2.imshow('threshold',threshold)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Lebih sederhana, ya, tapi kita masih kehilangan banyak konteks disini. Selanjutnya, kita bisa mencoba thresholding adaptif, yang akan mencoba untuk memvariasikan ambang batas, dan mudah-mudahan menjelaskan halaman-halaman yang melengkung.

				import cv2
				import numpy as np

				th = cv2.adaptiveThreshold(grayscaled, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 115, 1)
				cv2.imshow('original',img)
				cv2.imshow('Adaptive threshold',th)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

Ada versi lain dari thresholding yang bisa dilakukan seseorang, yang disebut ambang Otsu. Ini tidak membantu kita baik di sini, tapi:

				retval2,threshold2 = cv2.threshold(grayscaled,125,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
				cv2.imshow('original',img)
				cv2.imshow('Otsu threshold',threshold2)
				cv2.waitKey(0)
				cv2.destroyAllWindows()

7. Color Filtering OpenCV Python Tutorial
Dalam tutorial OpenCV dengan Python ini, kita akan membahas bagaimana membuat semacam filter, meninjau kembali operasi bitwise, di mana kita akan memfilter secara khusus warna tertentu, mencoba untuk hanya menampilkannya. Sebagai alternatif, Anda juga dapat secara khusus menyaring warna tertentu, dan kemudian menggantinya dengan pemandangan, seperti yang kita lakukan dengan mengganti ROI (wilayah gambar) dengan sesuatu yang lain, sama seperti cara kerja layar hijau.

Untuk menyaring seperti ini Anda memiliki beberapa pilihan. Umumnya, Anda mungkin akan mengubah warna Anda menjadi HSV, yaitu "Hue Saturation Value." Ini dapat membantu Anda benar-benar menunjukkan warna yang lebih spesifik, berdasarkan rentang hue dan saturasi, dengan varians nilai, misalnya. Jika Anda mau, Anda sebenarnya bisa menghasilkan filter berdasarkan nilai BGR, tapi ini akan sedikit lebih sulit. Jika Anda mengalami kesulitan dalam memvisualisasikan HSV, jangan merasa konyol, lihatlah halaman Wikipedia tentang HSV, ada grafik yang sangat berguna bagi Anda untuk memvisualisasikannya. Warna untuk warna, kejenuhan untuk kekuatan warna, dan nilai cahaya adalah bagaimana saya bisa mendeskripsikannya secara pribadi. Sekarang mari masuk.

				import cv2
				import numpy as np

				cap = cv2.VideoCapture(0)

				while(1):
				    _, frame = cap.read()
				    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
				    
				    lower_red = np.array([30,150,50])
				    upper_red = np.array([255,255,180])
				    
				    mask = cv2.inRange(hsv, lower_red, upper_red)
				    res = cv2.bitwise_and(frame,frame, mask= mask)

				    cv2.imshow('frame',frame)
				    cv2.imshow('mask',mask)
				    cv2.imshow('res',res)
				    
				    k = cv2.waitKey(5) & 0xFF
				    if k == 27:
					break

				cv2.destroyAllWindows()
				cap.release()

#output code

Ini hanya sebuah contoh, dengan warna merah sebagai targetnya. Cara kerja ini adalah apa yang kita lihat akan menjadi sesuatu yang berada di antara rentang kita di sini, pada dasarnya 30-255, 150-255, dan 50-180. Ini untuk warna merah, tapi jangan ragu untuk mencoba warna sendiri. Alasan mengapa HSV bekerja paling baik di sini adalah karena kita menginginkan berbagai warna, dan umumnya kita menginginkan warna yang sama dalam hal ini. Seringkali, warna merah yang khas masih memiliki warna hijau dan biru, jadi kita harus membiarkan beberapa warna hijau dan biru, tapi kemudian kita ingin merah penuh. Ini berarti kita akan mendapatkan campuran cahaya rendah dari semua warna yang masih ada saat ini.

Untuk mengetahui rentang HSV, saya yakin metode terbaik adalah hanya trial and error. Ada yang dibangun dengan metode OpenCV untuk mengubah BGR menjadi HSV. Jika Anda ingin memilih hanya satu warna saja, maka BGR ke HSV akan bagus untuk digunakan. Demi pengajaran, inilah contoh kode di tempat kerja:

				 dark_red  = np.uint8([[[12,22,121]]])               
				 dark_red = cv2.cvtColor(dark_red,cv2.COLOR_BGR2HSV) 

Hasilnya disini akan menjadi nilai HSV yang identik dengan nilai dark_red. Ini bagus ... tapi sekali lagi ... Anda mengalami masalah mendasar dengan rentang rentang warna vs HSV. Mereka pada dasarnya berbeda. Anda mungkin memiliki penggunaan yang sah untuk rentang BGR, mereka tetap bekerja, namun untuk mendeteksi satu "warna", itu tidak akan bekerja dengan baik.

Kembali ke kode utama, bagaimanapun, pertama-tama kita mengkonversikan frame ke HSV. Tidak ada yang spesial disana. Selanjutnya, kita tentukan beberapa nilai HSV untuk warna merah. Kami membuat masker, yang menggunakan pernyataan "inRange", untuk rentang spesifik kami. Ini benar atau salah, hitam atau putih. Selanjutnya, kita "mengembalikan" keunikan kita dengan menjalankan operasi bitwise. Pada dasarnya, kami menunjukkan warna dimana ada bingkai DAN topeng. Bagian putih topeng akan menjadi rentang merah, yang diubah menjadi putih bersih, sementara yang lainnya menjadi hitam. Akhirnya kami tampilkan semuanya. Saya memilih untuk menunjukkan bingkai asli, topeng, dan hasil akhirnya, sehingga Anda bisa mendapatkan ide yang lebih baik tentang apa yang sedang terjadi.

Pada tutorial selanjutnya, kita akan membangun sedikit tentang topik ini. Seperti yang mungkin bisa Anda lihat, kita masih memiliki sedikit "kebisingan" di sini. Benda-benda itu kasar, banyak titik hitam berwarna merah, dan banyak warna kecil lainnya berserakan. Ada beberapa hal yang bisa kita lakukan untuk mencoba mengurangi hal ini dengan mengaburkan dan merapikan, itulah yang akan kita bahas selanjutnya.


8. Blurring and Smoothing OpenCV Python Tutorial
Dalam tutorial OpenCV dengan Python ini, kita akan membahas bagaimana cara mencoba menghilangkan noise dari filter kita, seperti ambang batas sederhana atau bahkan filter warna tertentu seperti sebelumnya:

#gambar

Seperti yang Anda lihat, kita memiliki banyak titik hitam di mana kita lebih memilih warna merah, dan banyak titik-titik berwarna lainnya berserakan. Kita bisa menggunakan berbagai teknik blur dan smoothing untuk mencoba memperbaiki ini sedikit. Kita bisa mulai dengan beberapa kode yang sudah kita kenal:

				import cv2
				import numpy as np

				cap = cv2.VideoCapture(0)

				while(1):

				    _, frame = cap.read()
				    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
				    
				    lower_red = np.array([30,150,50])
				    upper_red = np.array([255,255,180])
				    
				    mask = cv2.inRange(hsv, lower_red, upper_red)
				    res = cv2.bitwise_and(frame,frame, mask= mask)

Sekarang, mari kita menerapkan smoothing sederhana, di mana kita melakukan semacam rata-rata per blok piksel. Dalam kasus kami, mari kita lakukan 15 x 15 persegi, yang berarti kita memiliki 225 piksel total.

				    kernel = np.ones((15,15),np.float32)/225
				    smoothed = cv2.filter2D(res,-1,kernel)
				    cv2.imshow('Original',frame)
				    cv2.imshow('Averaging',smoothed)

				    k = cv2.waitKey(5) & 0xFF
				    if k == 27:
					break

				cv2.destroyAllWindows()
				cap.release()

Hasil:
#gambar

Yang ini cukup sederhana, namun hasilnya mengorbankan banyak granularitas. Selanjutnya, mari kita coba beberapa Gaussian Blurring:

			    	blur = cv2.GaussianBlur(res,(15,15),0)
			   	cv2.imshow('Gaussian Blurring',blur)

Hasil:
#gambar

Pilihan lainnya adalah apa yang disebut Median Blur:

			    	median = cv2.medianBlur(res,15)
			    	cv2.imshow('Median Blur',median)

Hasil:
#gambar

Akhirnya, pilihan lain adalah blur bilateral:

			    	bilateral = cv2.bilateralFilter(res,15,75,75)
			    	cv2.imshow('bilateral Blur',bilateral)

Semua kabur dibandingkan:

Setidaknya dalam kasus ini, saya mungkin akan pergi dengan Median Blur, tapi penerangan yang berbeda, ambang batas / filter yang berbeda, dan jika tidak, tujuan dan sasaran berbeda dapat menentukan bahwa Anda menggunakan yang lain.
Pada tutorial selanjutnya, kita akan membahas transformasi morfologi


9. Morphological Transformations OpenCV Python Tutorial
Dalam tutorial OpenCV dengan Python ini, kita akan membahas Transformasi Morfologi. Ini adalah beberapa operasi sederhana yang bisa kita lakukan berdasarkan bentuk gambar. Ini cenderung berpasangan. Pasangan pertama yang akan kita bicarakan adalah Erosi dan Dilatasi. Erosi adalah di mana kita akan "mengikis" ujung-ujungnya. Cara kerja ini kita kerjakan dengan slider (kernel). Kami memberi ukuran slider, katakanlah 5 x 5 piksel. Yang terjadi adalah kita geser slider ini disekitarnya, dan jika semua pixel berwarna putih, maka kita menjadi putih, jika tidak berwarna hitam. Hal ini dapat membantu menghilangkan beberapa kebisingan putih. Versi lain dari ini adalah Dilation, yang pada dasarnya melakukan sebaliknya: Slides around, jika seluruh area tidak berwarna hitam, maka warnanya menjadi putih. Inilah contohnya:

				import cv2
				import numpy as np

				cap = cv2.VideoCapture(0)

				while(1):

				    _, frame = cap.read()
				    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
				    
				    lower_red = np.array([30,150,50])
				    upper_red = np.array([255,255,180])
				    
				    mask = cv2.inRange(hsv, lower_red, upper_red)
				    res = cv2.bitwise_and(frame,frame, mask= mask)

				    kernel = np.ones((5,5),np.uint8)
				    erosion = cv2.erode(mask,kernel,iterations = 1)
				    dilation = cv2.dilate(mask,kernel,iterations = 1)

				    cv2.imshow('Original',frame)
				    cv2.imshow('Mask',mask)
				    cv2.imshow('Erosion',erosion)
				    cv2.imshow('Dilation',dilation)

				    k = cv2.waitKey(5) & 0xFF
				    if k == 27:
					break

				cv2.destroyAllWindows()
				cap.release()

Hasil:

#gambar

Pasangan berikutnya adalah "opening" dan "closing." Tujuannya dengan membuka adalah menghapus "false positive" sehingga bisa berbicara. Terkadang, di latar belakang, Anda mendapatkan beberapa piksel di sana-sini "kebisingan". Gagasan "penutupan" adalah menghilangkan negatif palsu. Pada dasarnya ini adalah di mana Anda memiliki bentuk yang terdeteksi, seperti topi kami, namun Anda masih memiliki beberapa piksel hitam di dalam objek. Penutupan akan berusaha untuk menghapusnya.

				cap = cv2.VideoCapture(1)

				while(1):

				    _, frame = cap.read()
				    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
				    
				    lower_red = np.array([30,150,50])
				    upper_red = np.array([255,255,180])
				    
				    mask = cv2.inRange(hsv, lower_red, upper_red)
				    res = cv2.bitwise_and(frame,frame, mask= mask)

				    kernel = np.ones((5,5),np.uint8)
				    
				    opening = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
				    closing = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

				    cv2.imshow('Original',frame)
				    cv2.imshow('Mask',mask)
				    cv2.imshow('Opening',opening)
				    cv2.imshow('Closing',closing)

				    k = cv2.waitKey(5) & 0xFF
				    if k == 27:
					break

				cv2.destroyAllWindows()
				cap.release()

Hasilnya disini:
#gambar

Dua pilihan lain yang tidak terlalu berguna untuk kasus kami di sini adalah "tophat" dan "blackhat:"

			    # Ini adalah perbedaan antara gambar input dan Pembukaan gambar
			    cv2.imshow('Tophat',tophat)

			    # Ini adalah perbedaan antara penutupan gambar input dan gambar masukan.
			    cv2.imshow('Blackhat',blackhat)

Pada tutorial selanjutnya, kita akan membahas gradien dan deteksi tepi gambar.

10. Canny Edge Detection and Gradients OpenCV Python Tutorial
Selamat datang di OpenCV lain dengan tutorial Python. Dalam tutorial ini, kita akan membahas gradien dan deteksi tepi gambar. Gradien Gambar dapat digunakan untuk mengukur intensitas arah, dan deteksi tepi tidak persis seperti apa kedengarannya: ia menemukan ujung-ujungnya! Taruhan Anda tidak melihat itu datang.

Pertama, mari kita tunjukkan beberapa contoh gradien:

				import cv2
				import numpy as np

				cap = cv2.VideoCapture(1)

				while(1):

				    # Take each frame
				    _, frame = cap.read()
				    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
				    
				    lower_red = np.array([30,150,50])
				    upper_red = np.array([255,255,180])
				    
				    mask = cv2.inRange(hsv, lower_red, upper_red)
				    res = cv2.bitwise_and(frame,frame, mask= mask)

				    laplacian = cv2.Laplacian(frame,cv2.CV_64F)
				    sobelx = cv2.Sobel(frame,cv2.CV_64F,1,0,ksize=5)
				    sobely = cv2.Sobel(frame,cv2.CV_64F,0,1,ksize=5)

				    cv2.imshow('Original',frame)
				    cv2.imshow('Mask',mask)
				    cv2.imshow('laplacian',laplacian)
				    cv2.imshow('sobelx',sobelx)
				    cv2.imshow('sobely',sobely)

				    k = cv2.waitKey(5) & 0xFF
				    if k == 27:
					break

				cv2.destroyAllWindows()
				cap.release()

Hasil:
#gambar

Jika Anda bertanya-tanya apa itu cv2.CV_64F, itu tipe datanya. Ksize adalah ukuran kernel Kami menggunakan 5, jadi 5x5 daerah dikonsultasikan.

Meskipun kita dapat menggunakan gradien ini untuk mengubahnya menjadi tepi murni, kita juga dapat menggunakan deteksi Canny Edge!

				import cv2
				import numpy as np

				cap = cv2.VideoCapture(0)

				while(1):

				    _, frame = cap.read()
				    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
				    
				    lower_red = np.array([30,150,50])
				    upper_red = np.array([255,255,180])
				    
				    mask = cv2.inRange(hsv, lower_red, upper_red)
				    res = cv2.bitwise_and(frame,frame, mask= mask)

				    cv2.imshow('Original',frame)
				    edges = cv2.Canny(frame,100,200)
				    cv2.imshow('Edges',edges)

				    k = cv2.waitKey(5) & 0xFF
				    if k == 27:
					break

				cv2.destroyAllWindows()
				cap.release()

Hasil:
#gambar

Itu sangat bagus sekali! Tidak semuanya sempurna. Perhatikan bayangan yang menyebabkan tepinya terdeteksi. Salah satu yang paling jelas dari bayang-bayang tempat tidur anjing biru itu padam.
Dalam tutorial OpenCV berikutnya, kita akan berbicara tentang bagaimana kita bisa mencari dan menemukan template gambar yang sama pada gambar lainnya.


11. Template Matching OpenCV Python Tutorial
2542/5000
Selamat datang di OpenCV lain dengan tutorial Python, dalam tutorial ini kita akan membahas versi yang cukup mendasar dari pengenalan objek. Idenya di sini adalah menemukan daerah identik dari gambar yang sesuai dengan template yang kami berikan, memberikan ambang batas tertentu. Untuk objek yang tepat cocok, dengan pencahayaan / skala / sudut yang tepat, ini bisa bekerja dengan baik. Contoh di mana kondisi ini biasanya dipenuhi adalah tentang GUI di komputer. Tombol dan tombolnya selalu sama, sehingga Anda bisa menggunakan pencocokan template. Pair template yang cocok dengan beberapa kontrol mouse dan Anda punya bot berbasis web!

Untuk memulai, Anda memerlukan gambar utama dan template. Anda harus mengambil templat Anda dari "benda" tepat yang Anda cari dalam gambar. Saya akan memberikan gambar sebagai contoh, tapi jangan ragu untuk menggunakan gambar dari situs favorit Anda atau sesuatu seperti itu.

Gambar utama:
#gambar

Template yang akan kita cari: (port on the Pis)

Ini hanyalah salah satu pelabuhan, tapi kami penasaran ingin tahu apakah kami bisa mencocokkan yang lain. Kami memiliki opsi ambang batas, di mana jika ada kemungkinan pertandingan 80%, berarti kami mengatakan ini pertandingan. Jadi, kita akan mulai dengan loading dan konversi gambar

				import cv2
				import numpy as np

				img_rgb = cv2.imread('opencv-template-matching-python-tutorial.jpg')
				img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)

				template = cv2.imread('opencv-template-for-matching.jpg',0)
				w, h = template.shape[::-1]


Sejauh ini, kita memuat kedua gambar itu, berubah menjadi abu-abu. Kami menyimpan gambar RGB asli, dan membuat versi grayscale. Sudah saya sebutkan ini sebelumnya, tapi alasan mengapa kita melakukan ini adalah karena kita melakukan semua proses dalam versi grayscale, lalu gunakan koordinat yang sama untuk label dan sejenisnya pada gambar berwarna.

Dengan gambar utama, kita hanya memiliki versi warna dan versi grayscale. Kami memuat template dan mencatat dimensi.

				res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)
				threshold = 0.8
				loc = np.where( res >= threshold)

Di sini, kita memanggil res the matchTemplate antara img_gray (gambar utama kita), template, dan kemudian metode pencocokan yang akan kita gunakan. Kami menentukan ambang batas, di sini 0,8 untuk 80%. Kemudian kita menemukan lokasi dengan pernyataan logis, dimana res adalah lebih besar dari atau sama dengan 80%.

Akhirnya, kami menandai semua kecocokan pada gambar asli, dengan menggunakan koordinat yang kami temukan di gambar abu-abu:

				for pt in zip(*loc[::-1]):
				    cv2.rectangle(img_rgb, pt, (pt[0] + w, pt[1] + h), (0,255,255), 2)

				cv2.imshow('Detected',img_rgb)

Jadi kita punya beberapa pertandingan. Mungkin menurunkan ambang batas? Kami akan mencoba threshold = 0.7.

Punya beberapa positif palsu di sini. Anda bisa terus menyesuaikan ambang batas sampai Anda memiliki 100%, tapi Anda mungkin tidak akan pernah sampai di sana tanpa kesalahan positif. Pilihan lain adalah dengan hanya mengambil gambar template yang lain. Terkadang, ada gunanya memiliki banyak gambar dari objek yang sama. Dengan cara ini, Anda dapat mempertahankan ambang Anda cukup tinggi agar relatif yakin bahwa hasil Anda akan akurat.

Pada tutorial selanjutnya, kita akan membahas ekstraksi foreground.


12. GrabCut Foreground Extraction OpenCV Python Tutorial
Selamat datang di tutorial ekstraksi foreground dengan OpenCV dan Python. Idenya di sini adalah untuk menemukan latar depan, dan menghapus latar belakang. Ini sama seperti layar hijau, hanya di sini kita sebenarnya tidak memerlukan layar hijau.

Untuk memulai, kita akan menggunakan gambar:

Jangan ragu untuk menggunakan sendiri.

Mari kita muat di gambar dan tentukan beberapa hal:

				import numpy as np
				import cv2
				from matplotlib import pyplot as plt

				img = cv2.imread('opencv-python-foreground-extraction-tutorial.jpg')
				mask = np.zeros(img.shape[:2],np.uint8)

				bgdModel = np.zeros((1,65),np.float64)
				fgdModel = np.zeros((1,65),np.float64)

				rect = (161,79,150,150)

Sejauh ini, kami telah mengimpor cv2, numpy, dan matplotlib. Kemudian kita load pada gambar, buat masker, tentukan background dan foreground model, yang digunakan oleh algoritma internal. Bagian penting sebenarnya adalah rect yang kita definisikan. Ini adalah rect = (start_x, start_y, width, height).

Ini adalah persegi panjang yang membungkus objek utama kita. Jika Anda menggunakan gambar saya, itu adalah rect untuk digunakan. Jika Anda menggunakan sendiri, temukan koordinat yang tepat untuk gambar Anda.

Berikutnya:

				cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
				mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
				img = img*mask2[:,:,np.newaxis]

				plt.imshow(img)
				plt.colorbar()
				plt.show()

Jadi di sini kita menggunakan cv2.grabCut, yang mengambil beberapa parameter. Pertama gambar input, maka topeng, maka persegi panjang untuk objek utama kita, model latar belakang, model latar depan, jumlah iterasi untuk dijalankan, dan mode apa yang Anda gunakan.

Dari sini, topeng berubah sehingga semua 0 dan 2 piksel dikonversi ke latar belakang, di mana piksel 1 dan 3 sekarang menjadi latar depan. Dari sini, kita kalikan dengan masukan gambar, dan kita mendapatkan hasil akhir kita:

Hasil:
#gambar

Pada tutorial selanjutnya, kita akan membahas bagaimana melakukan deteksi sudut.


13. Corner Detection OpenCV Python Tutorial
Selamat datang di deteksi sudut dengan tutorial OpenCV dan Python. Tujuan pendeteksian sudut adalah untuk melacak hal-hal seperti gerak, melakukan pemodelan 3D, dan mengenali benda, bentuk, dan karakter.

Untuk tutorial ini, kita akan menggunakan gambar berikut:
#gambar

Tujuan kami di sini adalah untuk menemukan semua sudut dalam gambar ini. Saya akan mencatat bahwa kita memiliki beberapa masalah aliasing di sini (bergerigi dalam garis miring), jadi, jika kita membiarkannya, banyak sudut akan ditemukan, dan memang benar-benar demikian. Seperti biasa dengan OpenCV, bagian yang sulit dilakukan untuk kita sudah, dan yang perlu kita lakukan hanyalah memberi makan beberapa parameter. Mari kita mulai dengan memuat gambar dan menetapkan beberapa parameter:

				import numpy as np
				import cv2

				img = cv2.imread('opencv-corner-detection-sample.jpg')
				gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
				gray = np.float32(gray)

				corners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 10)
				corners = np.int0(corners)

Sejauh ini, kita muat gambarnya, ubah menjadi abu-abu, lalu ke float32. Selanjutnya, kita mendeteksi sudut dengan fungsi GoodFeaturesToTrack. Parameter disini adalah gambar, sudut maksimal untuk mendeteksi, kualitas, dan jarak minimum antar sudut. Seperti disebutkan sebelumnya, masalah aliasing yang kita miliki di sini akan memungkinkan banyak sudut ditemukan, jadi kita membatasinya. Berikutnya:

				for corner in corners:
				    x,y = corner.ravel()
				    cv2.circle(img,(x,y),3,255,-1)
				    
				cv2.imshow('Corner',img)

Sekarang kita iterate melalui setiap sudut, membuat lingkaran di setiap titik yang kita anggap sebagai sudut.
#gambar

Pada tutorial selanjutnya, kita akan membahas fitur matching / homography.

Tutorial selanjutnya:


14. 




