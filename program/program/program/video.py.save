from picamera.array import PiRGBArray
from picamera import PiCamera
import numpy as np
import time
import cv2

# initialize the camera and grab a reference to the raw camera capture
camera = PiCamera()
camera.rotation = 180
camera.resolution = (640, 480)
camera.framerate = 32
rawCapture = PiRGBArray(camera, size=(640, 480))
kernel = np.ones((5,5),np.uint8)
# allow the camera to warmup
time.sleep(0.1)

# capture frames from the camera
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    # grab the raw NumPy array representing the image, then initialize the timestamp
    # and occupied/unoccupied text
    image = frame.array
    video=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
    video1=cv2.cvtColor(image,cv2.COLOR_BGR2HSV)
    low_blue = np.array([110,50,50], dtype=np.uint8)
    up_blue = np.array([130,255,255], dtype=np.uint8) 
    mask = cv2.inRange(video1, low_blue, up_blue)
    mask = cv2.morphologyEx(mask,cv2.MORPH_CLOSE,kernel)
    mask = cv2.morphologyEx(mask,cv2.MORPH_OPEN,kernel)
   # _,contours,_=cv2.findContours(mask,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
    res = cv2.bitwise_and(image,image, mask= mask)       
    hitam=cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY_INV)[1]
	# show the frame
    cv2.imshow("image",image)
    cv2.imshow("video",video)
    cv2.imshow("video1",mask)
    cv2.imshow("binery",hitam)
    cv2.imshow("tracking",res)
    key = cv2.waitKey(1) & 0xFF

    # clear the stream in preparation for the next frame
    rawCapture.truncate(0)

    # if the `q` key was pressed, break from the loop
    if key == ord("q"):
        break
